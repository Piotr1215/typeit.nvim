*typeit.nvim.txt*           For NVIM v0.8.0          Last change: 2024 June 28

==============================================================================
Table of Contents                              *typeit.nvim-table-of-contents*

1. TypeIt.nvim                                       |typeit.nvim-typeit.nvim|
  - Features                                |typeit.nvim-typeit.nvim-features|
  - Installation                        |typeit.nvim-typeit.nvim-installation|
  - Configuration                      |typeit.nvim-typeit.nvim-configuration|
  - Usage                                      |typeit.nvim-typeit.nvim-usage|
  - Advanced Usage                    |typeit.nvim-typeit.nvim-advanced-usage|
  - Contributing                        |typeit.nvim-typeit.nvim-contributing|
  - License                                  |typeit.nvim-typeit.nvim-license|

==============================================================================
1. TypeIt.nvim                                       *typeit.nvim-typeit.nvim*

TypeIt.nvim is a Neovim plugin that simulates typing in real-time. It’s
perfect for creating engaging demos, tutorials, or presentations where you want
to showcase code or text being typed out dynamically.


FEATURES                                    *typeit.nvim-typeit.nvim-features*

- Simulate typing from files or strings
- Customizable typing speed
- Configurable pauses (line-by-line or paragraph)
- Filetype detection for syntax highlighting
- Easy to use Lua API and Vim commands


INSTALLATION                            *typeit.nvim-typeit.nvim-installation*


USING VIM-PLUG ~

>vim
    Plug 'Piotr1215/typeit.nvim'
<


USING PACKER.NVIM ~

>lua
    use 'Piotr1215/typeit.nvim'
<


USING LAZY.NVIM ~

>lua
    {
        'Piotr1215/typeit.nvim',
        config = function()
            require('typeit').setup({
                -- Your configuration here
            })
        end
    }
<


CONFIGURATION                          *typeit.nvim-typeit.nvim-configuration*

You can configure TypeIt.nvim globally using the `setup` function:

>lua
    require('typeit').setup({
        default_speed = 30,    -- Default typing speed (milliseconds)
        default_pause = 'line' -- Default pause behavior ('line' or 'paragraph')
    })
<


USAGE                                          *typeit.nvim-typeit.nvim-usage*


VIM COMMANDS ~

TypeIt.nvim provides the following commands:

- `:SimulateTyping [file_path] [speed]`: Simulate typing from a file
- `:SimulateTypingWithPauses [file_path] [speed] [pause_at]`: Simulate typing with pauses
- `:SimulateTypingWithParagraphPauses [file_path] [speed]`: Simulate typing with paragraph pauses
- `:StopTyping`: Stop the current typing simulation

Examples:

>vim
    :SimulateTyping ~/example.txt 30
    :SimulateTypingWithPauses ~/example.txt 50 line
    :StopTyping
<


LUA API ~

You can also use TypeIt.nvim’s functions directly in Lua:

>lua
    local typeit = require('typeit')
    
    -- Simulate typing from a file
    typeit.start_typing_simulation_from_file('~/example.txt', 50)
    
    -- Simulate typing a string
    typeit.simulate_typing("Hello, World!", 30)
    
    -- Simulate typing with line pauses
    typeit.simulate_typing_with_pauses("Line 1\nLine 2\nLine 3", 'line', 50)
    
    -- Simulate typing with paragraph pauses
    typeit.simulate_typing_with_pauses("Paragraph 1\n\nParagraph 2", 'paragraph', 50)
    
    -- Stop typing simulation
    typeit.stop_typing_simulation()
<


ADVANCED USAGE                        *typeit.nvim-typeit.nvim-advanced-usage*


CUSTOM KEYBINDINGS ~

You can set up custom keybindings for TypeIt.nvim commands:

>lua
    vim.api.nvim_set_keymap('n', '<leader>st', ':SimulateTyping<CR>', { noremap = true, silent = true })
    vim.api.nvim_set_keymap('n', '<leader>sp', ':SimulateTypingWithPauses<CR>', { noremap = true, silent = true })
<


INTEGRATION WITH OTHER PLUGINS ~

TypeIt.nvim can be easily integrated with other plugins. For example, you could
use it with a presentation plugin to create interactive coding demonstrations:

>lua
    -- Example integration (pseudo-code)
    presentation.on_slide_change(function(slide)
        if slide.has_code_demo then
            typeit.start_typing_simulation_from_file(slide.code_file, 30)
        end
    end)
<


CONTRIBUTING                            *typeit.nvim-typeit.nvim-contributing*

Contributions to TypeIt.nvim are welcome! Please feel free to submit a Pull
Request.


DEVELOPMENT SETUP ~

1. Fork the repository
2. Clone your fork: `git clone https://github.com/your-username/typeit.nvim.git`
3. Create a new branch: `git checkout -b my-new-feature`
4. Make your changes
5. Run the tests: `vusted test`
6. Commit your changes: `git commit -am 'Add some feature'`
7. Push to the branch: `git push origin my-new-feature`
8. Submit a pull request


LICENSE                                      *typeit.nvim-typeit.nvim-license*

This project is licensed under the MIT License - see the LICENSE <LICENSE> file
for details.

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
